{
  "hash": "985e802cf4ec51ea3dac706f7805db87",
  "result": {
    "markdown": "---\nformat: html\n---\n\n\n\n\n## Practice Questions 1\n\n**Observations** - Height of students (inches):\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] 65 69 66 67 68 72 68 69 63 70\n```\n:::\n:::\n\n\na) Let's say we know that the height of students, $\\tilde{x}$, in a classroom follows a normal distribution. A professor obtains the above height measurements students in her classroom. What is the log-likelihood that $\\tilde{x} \\sim \\mathcal{N} (68, 4)$? In other words, compute $\\ln \\mathcal{L} (\\mu = 68, \\sigma = 4)$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data\nx <- c(65, 69, 66, 67, 68, 72, 68, 69, 63, 70)\n\n# Compute the value of f(x) for each x\nf_x <- dnorm(x, 68, 4)\n\n# The likelihood is just the product of the probabilities in f_x\nprod(f_x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 1.447528e-11\n```\n:::\n\n```{.r .cell-code}\n# But this is a really tiny number, so computing the log-likelihood is helpful\nlog(prod(f_x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] -24.95858\n```\n:::\n\n```{.r .cell-code}\n# Of course, the way we typically compute the log-likelihood is by summing up \n# the log of the values in f_x \nsum(log(f_x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] -24.95858\n```\n:::\n:::\n\n\nb) Compute the log-likelihood function using the same standard deviation $(\\sigma = 4)$ but with the following different values for the mean, $\\mu: 66, 67, 68, 69, 70$. How do the results compare? Which value for $\\mu$ produces the highest log-likelihood?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# Create a vectors of values for the mean\nmeans <- c(66, 67, 68, 69, 70)\n\n# Compute the likelihood using different values for the mean:\nL1 <- sum(log(dnorm(x, means[1], 4)))\nL2 <- sum(log(dnorm(x, means[2], 4)))\nL3 <- sum(log(dnorm(x, means[3], 4)))\nL4 <- sum(log(dnorm(x, means[4], 4)))\nL5 <- sum(log(dnorm(x, means[5], 4)))\nlogLiks <- c(L1, L2, L3, L4, L5)\n\n# Create a data frame of the results\ndf <- data.frame(means, logLiks)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   means   logLiks\n#> 1    66 -25.83358\n#> 2    67 -25.08358\n#> 3    68 -24.95858\n#> 4    69 -25.45858\n#> 5    70 -26.58358\n```\n:::\n\n```{.r .cell-code}\n# Filter out the row with the maximum likelihood value:\ndf %>% \n  filter(logLiks == max(logLiks))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   means   logLiks\n#> 1    68 -24.95858\n```\n:::\n\n```{.r .cell-code}\n# Plot the result:\ndf %>% \n  ggplot(aes(x = means, y = logLiks)) +\n  geom_line() +\n  geom_point() + \n  theme_bw() + \n  labs(x = \"Mean Value\", y = \"Log-likelihood Values\")\n```\n\n::: {.cell-output-display}\n![](figs/unnamed-chunk-4-1.png){width=576}\n:::\n:::\n\n\n\n\n\n## Practice Questions 2\n\nConsider the following function:\n\n$$f(x) = x^2 - 6x$$\n\nThe gradient is:\n\n$$\\nabla f(x) = 2x - 6$$\n\nUsing the starting point $x = 1$ and the step size $\\gamma =  0.3$, apply the gradient descent method to compute the next **three** points in the search algorithm.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the step size and the starting point:\nstep <- 0.3\nx0 <- 1\n\n# Compute the first three steps of the gradient descent method:\nx1 <- x0 - step*(2*x0 - 6)\nx2 <- x1 - step*(2*x1 - 6)\nx3 <- x2 - step*(2*x2 - 6)\n\n# Display results\nc(x0, x1, x2, x3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 1.000 2.200 2.680 2.872\n```\n:::\n\n```{.r .cell-code}\n# Use the function to compute the next 20 steps:\ndf <- data.frame(step = seq(1, 20), x = 0)\nstep <- 0.3\nx0 <- 1\nfor (i in 1:nrow(df)) {\n    x1 <- x0 - step*(2*x0 - 6)\n    df$x[i] <- x1\n    x0 <- x1\n}\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    step        x\n#> 1     1 2.200000\n#> 2     2 2.680000\n#> 3     3 2.872000\n#> 4     4 2.948800\n#> 5     5 2.979520\n#> 6     6 2.991808\n#> 7     7 2.996723\n#> 8     8 2.998689\n#> 9     9 2.999476\n#> 10   10 2.999790\n#> 11   11 2.999916\n#> 12   12 2.999966\n#> 13   13 2.999987\n#> 14   14 2.999995\n#> 15   15 2.999998\n#> 16   16 2.999999\n#> 17   17 3.000000\n#> 18   18 3.000000\n#> 19   19 3.000000\n#> 20   20 3.000000\n```\n:::\n\n```{.r .cell-code}\n# Plot the algorithm\ndf %>% \n  mutate(y = x^2 - 6*x) %>% \n  ggplot(aes(x = x, y = y)) +\n  geom_line() + \n  geom_point() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](figs/unnamed-chunk-5-1.png){width=576}\n:::\n:::\n\n\n\n\n## Practice Questions 3\n\nConsider the following function:\n\n$$\nf(\\underline{x}) = x_1^2 + 4x_2^2\n$$\n\nThe gradient is:\n\n$$\n\\nabla f(\\underline{x}) =\n\\begin{bmatrix}\n2x_1\n\\\\ \n8x_2\n\\end{bmatrix}\n$$\n\nUsing the starting point $\\underline{x}_0 = [1, 1]$ and the step size $\\gamma =  0.15$, apply the gradient descent method to compute the next **three** points in the search algorithm.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the step size and the starting point:\nstep <- 0.15\nx0 <- c(1, 1)\n\n# Compute the first three steps of the gradient descent method:\nx1 <- x0 - step*(c(2, 8)*x0)\nx2 <- x1 - step*(c(2, 8)*x1)\nx3 <- x2 - step*(c(2, 8)*x2)\n\n# Display results\ncbind(x0, x1, x2, x3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>      x0   x1   x2     x3\n#> [1,]  1  0.7 0.49  0.343\n#> [2,]  1 -0.2 0.04 -0.008\n```\n:::\n\n```{.r .cell-code}\n# Use a loop to compute the next 20 steps:\ndf <- data.frame(stepNumber = seq(1, 20), x1 = 0, x2 = 0)\nx0 <- c(1, 1)\nstep <- 0.15\nfor (i in 1:nrow(df)) {\n    x1 <- x0 - step*(c(2, 8)*x0)\n    df[i, c('x1', 'x2')] <- x1\n    x0 <- x1\n}\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    stepNumber           x1            x2\n#> 1           1 0.7000000000 -2.000000e-01\n#> 2           2 0.4900000000  4.000000e-02\n#> 3           3 0.3430000000 -8.000000e-03\n#> 4           4 0.2401000000  1.600000e-03\n#> 5           5 0.1680700000 -3.200000e-04\n#> 6           6 0.1176490000  6.400000e-05\n#> 7           7 0.0823543000 -1.280000e-05\n#> 8           8 0.0576480100  2.560000e-06\n#> 9           9 0.0403536070 -5.120000e-07\n#> 10         10 0.0282475249  1.024000e-07\n#> 11         11 0.0197732674 -2.048000e-08\n#> 12         12 0.0138412872  4.096000e-09\n#> 13         13 0.0096889010 -8.192000e-10\n#> 14         14 0.0067822307  1.638400e-10\n#> 15         15 0.0047475615 -3.276800e-11\n#> 16         16 0.0033232931  6.553600e-12\n#> 17         17 0.0023263051 -1.310720e-12\n#> 18         18 0.0016284136  2.621440e-13\n#> 19         19 0.0011398895 -5.242880e-14\n#> 20         20 0.0007979227  1.048576e-14\n```\n:::\n\n```{.r .cell-code}\n# Plot the algorithm\nplot1 <- df %>% \n  mutate(y = x1^2 + 4*x2^2) %>% \n  ggplot(aes(x = x1, y = y)) +\n  geom_line() + \n  geom_point() + \n  theme_bw()\n\nplot2 <- df %>% \n  mutate(y = x1^2 + 4*x2^2) %>% \n  ggplot(aes(x = x2, y = y)) +\n  geom_line() + \n  geom_point() + \n  theme_bw()\n\nplot1 + plot2\n```\n\n::: {.cell-output-display}\n![](figs/unnamed-chunk-6-1.png){width=576}\n:::\n:::\n\n\n\n\n\n## In Class Questions 1\n\n1. Write code to read in the `state_abbs.csv` and `state_regions.csv` data files in the \"data\" folder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregions <- read_csv(here::here('data', 'state_regions.csv'))\nabbs <- read_csv(here::here('data', 'state_abbs.csv'))\n```\n:::\n\n\n2. Create a new data frame called `states` by joining the two data frames `states_abbs` and `state_regions` together. The result should be a data frame with variables `region`, `name`, `abb`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates <- regions %>%\n    left_join(abbs, by = c('state' = 'state_name')) %>%\n    select(region, name = state, abb = state_abb)\nhead(states)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 6 Ã— 3\n#>   region    name          abb  \n#>   <chr>     <chr>         <chr>\n#> 1 Northeast Maine         ME   \n#> 2 Northeast New Hampshire NH   \n#> 3 Northeast Vermont       VT   \n#> 4 Northeast Massachusetts MA   \n#> 5 Northeast Rhode Island  RI   \n#> 6 Northeast Connecticut   CT\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}